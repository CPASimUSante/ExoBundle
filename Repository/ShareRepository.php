<?php

namespace UJM\ExoBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * ShareRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ShareRepository extends EntityRepository
{
    public function getControlSharedQuestion($user, $question)
    {
        $qb = $this->createQueryBuilder('s');
        $qb->join('s.user', 'u')
            ->where($qb->expr()->in('s.question', $question))
            ->andWhere($qb->expr()->in('u.id', $user));

        return $qb->getQuery()->getResult();
    }

    public function getUserInteractionSharedImport($exoId, $uid, $em)
    {

        $questions = array();

        $dql = 'SELECT eq FROM UJM\ExoBundle\Entity\ExerciseQuestion eq WHERE eq.exercise=' . $exoId
            . ' ORDER BY eq.ordre';

        $query = $em->createQuery($dql);
        $eqs = $query->getResult();

        foreach ($eqs as $eq) {
            $questions[] = $eq->getQuestion()->getId();
        }

        $qb = $this->createQueryBuilder('s');

        $qb->join('s.question', 'q')
           ->join('s.user', 'u')
           ->where($qb->expr()->in('u.id', $uid));
        if (count($questions) > 0) {
             $qb->andWhere('q.id not in ('.implode(',', $questions).')');
        }

        return $qb->getQuery()->getResult();
    }

    public function findByCategoryShared($userId, $whatToFind)
    {
        $dql = 'SELECT s FROM UJM\ExoBundle\Entity\Share s JOIN s.question q JOIN q.category c
            WHERE c.value LIKE :search
            AND s.user = '.$userId.'
        ';

        $query = $this->_em->createQuery($dql)
            ->setParameter('search', "%{$whatToFind}%");

        return $query->getResult();
    }

    public function findByTitleShared($userId, $whatToFind)
    {
        $dql = 'SELECT s FROM UJM\ExoBundle\Entity\Share s JOIN s.question q
            WHERE q.title LIKE :search
            AND s.user = '.$userId.'
        ';

        $query = $this->_em->createQuery($dql)
            ->setParameter('search', "%{$whatToFind}%");

        return $query->getResult();
    }

    public function findByTypeShared($userId, $whatToFind)
    {
        $dql = 'SELECT s FROM UJM\ExoBundle\Entity\Share s, UJM\ExoBundle\Entity\Interaction i
                WHERE s.question = i.question
                AND s.user = '.$userId.'
                AND i.type LIKE :search
        ';

        $query = $this->_em->createQuery($dql)
            ->setParameter('search', "%{$whatToFind}%");

        return $query->getResult();
    }

    public function findByContainShared($userId, $whatToFind)
    {
         $dql = 'SELECT s FROM UJM\ExoBundle\Entity\Share s, UJM\ExoBundle\Entity\Interaction i
                WHERE s.question = i.question
                AND s.user = '.$userId.'
                AND i.invite LIKE :search
        ';

        $query = $this->_em->createQuery($dql)
            ->setParameter('search', "%{$whatToFind}%");

        return $query->getResult();
    }

    public function findByAllShared($userId, $whatToFind)
    {
        $dql = 'SELECT s FROM UJM\ExoBundle\Entity\Share s, UJM\ExoBundle\Entity\Interaction i,
                UJM\ExoBundle\Entity\Question q, UJM\ExoBundle\Entity\Category c
                WHERE s.question = i.question AND i.question = q AND q.category = c
                AND s.user = '.$userId.'
                AND (i.invite LIKE :search OR i.type LIKE :search OR c.value LIKE :search OR q.title LIKE :search)
        ';

        $query = $this->_em->createQuery($dql)
            ->setParameter('search', "%{$whatToFind}%");

        return $query->getResult();
    }
}