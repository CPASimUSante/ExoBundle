<?php

namespace UJM\ExoBundle\Repository;

use Doctrine\ORM\EntityRepository;
use UJM\ExoBundle\Entity\Exercise;

/**
 * QuestionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionRepository extends EntityRepository
{
    /**
     * Returns all the interactions linked to a given exercise.
     *
     * @param Exercise $exercise
     * @return Interaction[]
     */
    public function findByExercise(Exercise $exercise)
    {
        return $this->createQueryBuilder('q')
            ->join('q.exerciseQuestions', 'eq')
            ->join('eq.exercise', 'e')
            ->where('e = :exercise')
            ->orderBy('eq.ordre')
            ->setParameter(':exercise', $exercise)
            ->getQuery()
            ->getResult();
    }

    /**
     * Get user's Questions
     *
     * @access public
     *
     * @param integer $userId id User
     *
     * Return array[Question]
     */
    public function getQuestionsUser($userId)
    {
        $qb = $this->createQueryBuilder('q');
        $qb->join('q.user', 'u')
            ->where($qb->expr()->in('u.id', $userId));

        return $qb->getQuery()->getResult();
    }

    /**
     * Allow to know if the User is the owner of this Question
     *
     * @access public
     *
     * @param integer $user id User
     * @param integer $question id Question
     *
     * Return array[Question]
     */
    public function getControlOwnerQuestion($user, $question)
    {
        $qb = $this->createQueryBuilder('q');
        $qb->join('q.user', 'u')
            ->where($qb->expr()->in('q.id', $question))
            ->andWhere($qb->expr()->in('u.id', $user));

        return $qb->getQuery()->getResult();
    }

    /**
     * Search question by category
     *
     * @access public
     *
     * @param integer $userId id User
     * @param String $whatToFind string to find
     *
     * Return array[Question]
     */
    public function findByCategory($userId, $whatToFind)
    {
        $dql = 'SELECT q FROM UJM\ExoBundle\Entity\Question q JOIN q.category c
            WHERE c.value LIKE ?1
            AND q.user = ?2';

        $query = $this->_em->createQuery($dql)
                      ->setParameters(array(1 => "%{$whatToFind}%", 2 => $userId));

        return $query->getResult();
    }

    /**
     * Search question
     *
     * @access public
     *
     * @param integer $userId id User
     * @param String $whatToFind string to find
     *
     * Return array[Question]
     */
    public function findByTitle($userId, $whatToFind)
    {
        $dql = 'SELECT q FROM UJM\ExoBundle\Entity\Question q
            WHERE q.title LIKE ?1
            AND q.user = ?2';

        $query = $this->_em->createQuery($dql)
                      ->setParameters(array(1 => "%{$whatToFind}%", 2 => $userId));

        return $query->getResult();
    }

    /**
     * To import model's user in an exercise
     *
     * @access public
     *
     * @param Doctrine EntityManager $em
     * @param integer $uid id of User
     * @param integer $exoId id of exercise
     *
     * Return array[Interaction]
     */
    public function getUserModelImport($em, $uid, $exoId)
    {
        $questions = array();

        $dql = 'SELECT eq FROM UJM\ExoBundle\Entity\ExerciseQuestion eq WHERE eq.exercise= ?1
                ORDER BY eq.ordre';

        $query = $em->createQuery($dql)->setParameter(1, $exoId);
        $eqs = $query->getResult();

        foreach ($eqs as $eq) {
            $questions[] = $eq->getQuestion()->getId();
        }

        $qb = $this->createQueryBuilder('i');

        $qb->join('i.question', 'q')
           ->join('q.category', 'c')
           ->join('q.user', 'u')
           ->where($qb->expr()->in('u.id', $uid))
           ->andWhere('q.model in (1)');
        if (count($questions) > 0) {
             $qb->andWhere('q.id not in ('.implode(',', $questions).')');
        }
        $qb->orderBy('c.value', 'ASC')
           ->addOrderBy('q.title', 'ASC');

        return $qb->getQuery()->getResult();
    }
}
